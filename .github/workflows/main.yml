name: Deploy to OpenShift

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

    
      - name: Build Docker image
        run: |
          docker build -t app.py .

      - name: Login to OpenShift
        run: |
          oc login --username=${{ secrets.OPENSHIFT_USERNAME}} --password=${{ secrets.OPENSHIFT_PASSWORD}}  --server=${{ secrets.OPENSHIFT_SERVER }}

      - name: Get Openshift Registry URL
        id: get-registry-url
        run: |
          REGISTRY_URL=$(oc get route default-route -n openshift-image-registry --tempalte='{{ .spec.host }}'
          echo "registry URL: $REGISTRY_URL"
          echo "::set-output name=registry_url::$REGISTRY_URL"

      - name: Tag Docker image
        run: |
          docker tag app.py:latest ${{ secrets.OPENSHIFT_REGISTRY }}/my-project/app.py:latest

      - name: log in to OpenShift Registry
        run : |
          docker login -u $(oc whoami) -p$(oc whoami -t) ${{ steps.get-registry-url.output.registry_url }}
      
      - name: Push Docker image to OpenShift Registry
        run: |
          docker push ${{ secrets.get-registry-url.outputs.registry_url }}/my-project/app.py:latest

      - name: Deploy to OpenShift
        run: |
          oc project my-project
          oc apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: app.py
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: app.py
          template:
            metadata:
              labels:
                app: app.py
            spec:
              containers:
                - name: app.py
                  image: ${{ secrets.get-registry-url.outputs.registry_url }}/app.py:latest
                  ports:
                    - containerPort: 5000
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: app.py
          spec:
            selector:
              app: app.py
            ports:
              - protocol: TCP
                port: 80
                targetPort: 5000
          EOF
